#!/usr/bin/env php
<?php

// extract-bulletin-data './directory/to/bulletins' './path/to/output.csv'
// This takes a (potentially nested) directory of PDF files, and extracts the relevant data, and outputs a CSV file

require __DIR__ . '/vendor/autoload.php';

$service_bulletin_directory = (isset($argv[1]) ? $argv[1] : null);
$output_csv_path = (isset($argv[2]) ? $argv[2] : null);

function err ($message) {
    error_log($message, 0, 'php://stderr');
}

function out ($message) {
    echo $message;
    echo "\n";
}

function sanitiseToFilename ($string, $replacement = '') {
    return preg_replace("/[^\p{L}0-9 .,;'~`!@#$%^&()\-_+=\[\]\{\}]/u", $replacement, $string);
}

if (!is_dir($service_bulletin_directory) OR !is_readable($service_bulletin_directory)) {
    err("The path parameter is not a directory, or you do not have read permissions on the directory.");
    exit(1);
}

$output_csv_directory = dirname($output_csv_path);
if (!is_dir($output_csv_directory) OR !is_writable($output_csv_directory)) {
    err("The directory for the output CSV path parameter is not a directory or is not writable.");
    exit(1);
}

$service_bulletin_directory = realpath($service_bulletin_directory);
$mime_type_parser = new \finfo(FILEINFO_MIME_TYPE);
$parser = new \Smalot\PdfParser\Parser();

$pdf_contents = [];

foreach (
    new \RecursiveIteratorIterator (
        new \RecursiveDirectoryIterator (
            $service_bulletin_directory, 
            \RecursiveDirectoryIterator::SKIP_DOTS
        )
    ) 
    as $service_bulletin_file) {

    // skipping hidden files
    if ($service_bulletin_file->getFilename()[0] == '.') continue;

    // check if readable, is a file, has pdf extension, and correct mimetype
    if (!$service_bulletin_file->isFile() 
        OR !$service_bulletin_file->isReadable() 
        OR $service_bulletin_file->getExtension() != 'pdf' 
        OR $mime_type_parser->file($service_bulletin_file->getPathname()) != 'application/pdf') {
        err("Skipping '{$service_bulletin_file->getFilename()}', it is not a PDF file or it is not readable.");
        continue;
    }

    try {

        $pdf = $parser->parseFile($service_bulletin_file->getPathname());
        $first_page = $pdf->getPages()[0];
        $first_page_text = $first_page->getText();

    } catch (\Exception $e) {

        err("Error parsing this file: '{$service_bulletin_file->getPathname()}'");
        err("    Exception Message: {$e->getCode()} {$e->getMessage()}");

    }

    out("Parsing '{$service_bulletin_file->getPathname()}'");

    // We use a non-capturing group with a negative lookahead to prevent numbers.
    // Possible types of data:
    /*
        NUMBER: 1.0/100
        NUMBER: 1.0/100   
        NUMBER: 1.0/100C
        NUMBER: 1.0/135 B    Page 1 of 6
        NUMBER: 5.13.6/101 Caterpillar
     */
    preg_match('/^NUMBER: *(.+\/\d+(?: *[A-Za-z](?![A-Za-z0-9]))?)/m', $first_page_text, $matches);
    $bulletin_number = (isset($matches[1]) ? $matches[1] : null);

    preg_match('/^ISSUED: *(.+) */m', $first_page_text, $matches);
    $bulletin_issued_date = (isset($matches[1]) ? $matches[1] : null);

    preg_match('/^REVISED: *(.+) */m', $first_page_text, $matches);
    $bulletin_revised_date = (isset($matches[1]) ? $matches[1] : null);

    preg_match('/^PRODUCT: *(.+) */m', $first_page_text, $matches);
    $bulletin_product = (isset($matches[1]) ? $matches[1] : null);

    preg_match('/^MODEL\(S\): *(.+) */m', $first_page_text, $matches);
    $bulletin_model = (isset($matches[1]) ? $matches[1] : null);

    preg_match('/^SUBJECT: *([\S\s\n]+?)\n^(?:PRODUCT SAFETY|—REVISION NOTICE—|.+:)/m', $first_page_text, $matches);
    $bulletin_subject = preg_replace('/\n/', ' ' , (isset($matches[1]) ? $matches[1] : null));
    $bulletin_subject = sanitiseToFilename($bulletin_subject);
    $bulletin_subject = (!empty($bulletin_subject) ? $bulletin_subject : null);

    preg_match('/^Type of Change: *(.+) */m', $first_page_text, $matches);
    $bulletin_type_of_change = (isset($matches[1]) ? $matches[1] : null);

    preg_match('/^Recommended[\n\r\s]+^Compliance: *(.+) */m', $first_page_text, $matches);
    $bulletin_recommended_compliance = (isset($matches[1]) ? $matches[1] : null);

    $pdf_contents[] = [
        'FILE'                   => $service_bulletin_file->getPathname(),
        'NUMBER'                 => $bulletin_number, 
        'ISSUED'                 => $bulletin_issued_date, 
        'REVISED'                => $bulletin_revised_date,
        'PRODUCT'                => $bulletin_product,
        'MODEL'                  => $bulletin_model, 
        'SUBJECT'                => $bulletin_subject,
        'TYPE OF CHANGE'         => $bulletin_type_of_change, 
        'RECOMMENDED COMPLIANCE' => $bulletin_recommended_compliance
    ];

}

$writer = \League\Csv\Writer::createFromFileObject(new \SplTempFileObject());

$writer->insertOne(array_keys($pdf_contents[0]));
$writer->insertAll($pdf_contents);

file_put_contents($output_csv_path, $writer);

out("Extracted data from all PDFs in $service_bulletin_directory to $output_csv_path");